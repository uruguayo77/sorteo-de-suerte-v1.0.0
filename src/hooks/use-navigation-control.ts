import { useState, useEffect, useCallback } from 'react';
import { useToast } from './use-toast';

type Step = 'number-selection' | 'payment-method' | 'payment-details' | 'payment-form' | 'success';

interface NavigationState {
  currentStep: Step;
  hasActiveReservation: boolean;
  reservationId: string | null;
  selectedNumbers: number[];
}

interface NavigationControls {
  navigationState: NavigationState;
  updateNavigationState: (updates: Partial<NavigationState>) => void;
  isCriticalStep: () => boolean;
  shouldBlockNavigation: () => boolean;
  handleNavigationAttempt: () => Promise<boolean>;
  cleanup: () => void;
  showConfirmDialog: boolean;
  setShowConfirmDialog: (show: boolean) => void;
  confirmNavigation: () => void;
  cancelNavigation: () => void;
}

export const useNavigationControl = (): NavigationControls => {
  const { toast } = useToast();
  
  const [navigationState, setNavigationState] = useState<NavigationState>({
    currentStep: 'number-selection',
    hasActiveReservation: false,
    reservationId: null,
    selectedNumbers: []
  });

  const [showConfirmDialog, setShowConfirmDialog] = useState(false);
  const [pendingNavigation, setPendingNavigation] = useState<(() => void) | null>(null);

  // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —à–∞–≥–∏, –≥–¥–µ –Ω—É–∂–Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é
  const criticalSteps: Step[] = ['payment-method', 'payment-details', 'payment-form'];

  const updateNavigationState = useCallback((updates: Partial<NavigationState>) => {
    setNavigationState(prev => ({ ...prev, ...updates }));
  }, []);

  const isCriticalStep = useCallback((): boolean => {
    return criticalSteps.includes(navigationState.currentStep);
  }, [navigationState.currentStep]);

  const shouldBlockNavigation = useCallback((): boolean => {
    return navigationState.hasActiveReservation && isCriticalStep();
  }, [navigationState.hasActiveReservation, isCriticalStep]);

  // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–≤–æ–π)
  const cleanup = useCallback(() => {
    console.log('üßπ Navigation cleanup triggered');
    
    if (navigationState.hasActiveReservation && navigationState.reservationId) {
      // TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏
      console.log('üîÑ Auto-canceling reservation:', navigationState.reservationId);
      
      toast({
        title: "Reserva Cancelada",
        description: "Tu reserva ha sido cancelada autom√°ticamente.",
        variant: "default",
      });
    }

    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setNavigationState({
      currentStep: 'number-selection',
      hasActiveReservation: false,
      reservationId: null,
      selectedNumbers: []
    });
  }, [navigationState.hasActiveReservation, navigationState.reservationId, toast]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const handleNavigationAttempt = useCallback(async (): Promise<boolean> => {
    if (!shouldBlockNavigation()) {
      return true; // –†–∞–∑—Ä–µ—à–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º confirmation dialog
    setShowConfirmDialog(true);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º Promise –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–µ—à–∏—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return new Promise((resolve) => {
      setPendingNavigation(() => () => {
        resolve(true);
      });
    });
  }, [shouldBlockNavigation]);

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–æ—Ç–º–µ–Ω–∞ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥)
  const confirmNavigation = useCallback(() => {
    console.log('‚úÖ User confirmed navigation - cleaning up reservation');
    
    setShowConfirmDialog(false);
    cleanup();
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    if (pendingNavigation) {
      pendingNavigation();
      setPendingNavigation(null);
    }
  }, [cleanup, pendingNavigation]);

  // –û—Ç–º–µ–Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–æ—Å—Ç–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
  const cancelNavigation = useCallback(() => {
    console.log('‚ùå User canceled navigation - staying on page');
    
    setShowConfirmDialog(false);
    setPendingNavigation(null);
    
    toast({
      title: "Reserva Mantenida",
      description: "Tus n√∫meros siguen reservados. Completa el pago para confirmar.",
      variant: "default",
    });
  }, [toast]);

  // Browser navigation control
  useEffect(() => {
    const handlePopState = async (event: PopStateEvent) => {
      console.log('üîô Browser back button pressed', { 
        currentStep: navigationState.currentStep,
        hasReservation: navigationState.hasActiveReservation 
      });

      if (shouldBlockNavigation()) {
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –Ω–∞–∑–∞–¥
        event.preventDefault();
        window.history.pushState(null, '', window.location.href);
        
        const shouldProceed = await handleNavigationAttempt();
        if (!shouldProceed) {
          console.log('üö´ Navigation blocked');
          return;
        }
      }
    };

    const handleBeforeUnload = (event: BeforeUnloadEvent) => {
      if (shouldBlockNavigation()) {
        console.log('‚ö†Ô∏è Page unload attempt with active reservation');
        
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
        const message = '¬øEst√°s seguro de que quieres salir? Tienes n√∫meros reservados.';
        event.preventDefault();
        event.returnValue = message;
        return message;
      }
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π
    window.addEventListener('popstate', handlePopState);
    window.addEventListener('beforeunload', handleBeforeUnload);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
    if (shouldBlockNavigation()) {
      window.history.pushState(null, '', window.location.href);
    }

    return () => {
      window.removeEventListener('popstate', handlePopState);
      window.removeEventListener('beforeunload', handleBeforeUnload);
    };
  }, [navigationState, shouldBlockNavigation, handleNavigationAttempt]);

  // Cleanup –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    return () => {
      if (navigationState.hasActiveReservation) {
        cleanup();
      }
    };
  }, []);

  return {
    navigationState,
    updateNavigationState,
    isCriticalStep,
    shouldBlockNavigation,
    handleNavigationAttempt,
    cleanup,
    showConfirmDialog,
    setShowConfirmDialog,
    confirmNavigation,
    cancelNavigation
  };
}; 