/**
 * useActivityTracker - –•—É–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * –õ–æ–≥–∏—Ä—É–µ—Ç –ø–æ—Å–µ—â–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü, –¥–µ–π—Å—Ç–≤–∏—è –∏ –¥—Ä—É–≥—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–µ–∑ –≤–ª–∏—è–Ω–∏—è –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
 */

import { useEffect, useRef, useCallback } from 'react'
import { useLocation } from 'react-router-dom'
import { AnalyticsService } from '@/lib/analyticsService'

interface ActivityTrackerOptions {
  enabled?: boolean
  batchSize?: number
  flushInterval?: number // –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  trackPageViews?: boolean
  trackUserInteractions?: boolean
}

const defaultOptions: ActivityTrackerOptions = {
  enabled: true,
  batchSize: 10,
  flushInterval: 30000, // 30 —Å–µ–∫—É–Ω–¥
  trackPageViews: true,
  trackUserInteractions: true
}

// –û—á–µ—Ä–µ–¥—å –¥–ª—è batch –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
let activityQueue: Array<{
  session_id: string
  page_visited: string
  action_type: any
  user_ip?: string
  user_agent?: string
  metadata?: Record<string, any>
}> = []

// –¢–∞–π–º–µ—Ä –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
let flushTimer: NodeJS.Timeout | null = null

export function useActivityTracker(options: ActivityTrackerOptions = {}) {
  const config = { ...defaultOptions, ...options }
  const location = useLocation()
  const sessionId = useRef<string>('')
  const userIP = useRef<string | null>(null)
  const lastPageVisit = useRef<string>('')
  const isInitialized = useRef(false)

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
  useEffect(() => {
    if (!config.enabled || isInitialized.current) return

    const initializeSession = async () => {
      try {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π session ID
        sessionId.current = AnalyticsService.generateSessionId()
        
        // –ü–æ–ª—É—á–∞–µ–º IP –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        userIP.current = await AnalyticsService.getUserIP()
        
        isInitialized.current = true
        
        console.log('üîç Activity Tracker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', {
          sessionId: sessionId.current,
          userIP: userIP.current
        })
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Activity Tracker:', error)
      }
    }

    initializeSession()
  }, [config.enabled])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –æ—á–µ—Ä–µ–¥—å
  const queueActivity = useCallback((
    action_type: any,
    page_visited: string,
    metadata?: Record<string, any>
  ) => {
    if (!config.enabled || !sessionId.current) return

    try {
      activityQueue.push({
        session_id: sessionId.current,
        page_visited,
        action_type,
        user_ip: userIP.current || undefined,
        user_agent: navigator.userAgent,
        metadata: metadata || {}
      })

      console.log('üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å:', action_type, '–Ω–∞', page_visited)

      // –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –¥–æ—Å—Ç–∏–≥–ª–∞ —Ä–∞–∑–º–µ—Ä–∞ batch, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
      if (activityQueue.length >= config.batchSize!) {
        flushActivityQueue()
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –æ—á–µ—Ä–µ–¥—å:', error)
    }
  }, [config.enabled, config.batchSize])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  const flushActivityQueue = useCallback(async () => {
    if (activityQueue.length === 0) return

    try {
      const activitiesToSend = [...activityQueue]
      activityQueue = [] // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å

      console.log('üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ batch –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', activitiesToSend.length, '–∑–∞–ø–∏—Å–µ–π')

      const success = await AnalyticsService.logBatchActivity(activitiesToSend)
      if (!success) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å')
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å
        activityQueue.unshift(...activitiesToSend)
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ batch –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error)
    }
  }, [])

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
  useEffect(() => {
    if (!config.enabled) return

    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
    if (flushTimer) {
      clearInterval(flushTimer)
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    flushTimer = setInterval(() => {
      flushActivityQueue()
    }, config.flushInterval!)

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      if (flushTimer) {
        clearInterval(flushTimer)
        flushTimer = null
      }
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
      flushActivityQueue()
    }
  }, [config.enabled, config.flushInterval, flushActivityQueue])

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å–µ—â–µ–Ω–∏–π —Å—Ç—Ä–∞–Ω–∏—Ü
  useEffect(() => {
    if (!config.enabled || !config.trackPageViews || !isInitialized.current) return

    const currentPage = location.pathname + location.search
    
    // –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤ –¥–ª—è —Ç–æ–π –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (lastPageVisit.current === currentPage) return
    
    lastPageVisit.current = currentPage

    console.log('üìÑ –ü–æ—Å–µ—â–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', currentPage)

    queueActivity(
      'page_visit',
      currentPage,
      {
        referrer: document.referrer,
        timestamp: new Date().toISOString(),
        viewport: {
          width: window.innerWidth,
          height: window.innerHeight
        }
      }
    )
  }, [location.pathname, location.search, config.enabled, config.trackPageViews, queueActivity])

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    if (!config.enabled || !config.trackUserInteractions) return

    const handleVisibilityChange = () => {
      if (!document.hidden) {
        queueActivity(
          'page_visit',
          location.pathname + location.search,
          {
            action: 'tab_focus',
            timestamp: new Date().toISOString()
          }
        )
      }
    }

    const handleBeforeUnload = () => {
      // –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      if (activityQueue.length > 0) {
        navigator.sendBeacon('/api/analytics', JSON.stringify(activityQueue))
      }
    }

    // –°–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π
    document.addEventListener('visibilitychange', handleVisibilityChange)
    window.addEventListener('beforeunload', handleBeforeUnload)

    return () => {
      document.removeEventListener('visibilitychange', handleVisibilityChange)
      window.removeEventListener('beforeunload', handleBeforeUnload)
    }
  }, [config.enabled, config.trackUserInteractions, location.pathname, location.search, queueActivity])

  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  const trackAction = useCallback((
    action_type: any,
    metadata?: Record<string, any>
  ) => {
    const currentPage = location.pathname + location.search
    queueActivity(action_type, currentPage, metadata)
  }, [location.pathname, location.search, queueActivity])

  const trackNumberSelection = useCallback((numbers: number[]) => {
    trackAction('number_select', {
      selected_numbers: numbers,
      count: numbers.length,
      timestamp: new Date().toISOString()
    })
  }, [trackAction])

  const trackPaymentStart = useCallback((amount: number, method: string) => {
    trackAction('payment_start', {
      amount,
      payment_method: method,
      timestamp: new Date().toISOString()
    })
  }, [trackAction])

  const trackPaymentComplete = useCallback((amount: number, method: string, transactionId?: string) => {
    trackAction('payment_complete', {
      amount,
      payment_method: method,
      transaction_id: transactionId,
      timestamp: new Date().toISOString()
    })
  }, [trackAction])

  const trackTicketScratch = useCallback((ticketId: string) => {
    trackAction('ticket_scratch', {
      ticket_id: ticketId,
      timestamp: new Date().toISOString()
    })
  }, [trackAction])

  const trackAdminLogin = useCallback((adminEmail?: string) => {
    trackAction('admin_login', {
      admin_email: adminEmail,
      timestamp: new Date().toISOString()
    })
  }, [trackAction])

  const trackReservationCreate = useCallback((applicationId: string, numbers: number[]) => {
    trackAction('reservation_create', {
      application_id: applicationId,
      numbers,
      count: numbers.length,
      timestamp: new Date().toISOString()
    })
  }, [trackAction])

  const trackReservationCancel = useCallback((applicationId: string, reason?: string) => {
    trackAction('reservation_cancel', {
      application_id: applicationId,
      reason,
      timestamp: new Date().toISOString()
    })
  }, [trackAction])

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—á–µ—Ä–µ–¥–∏
  const flushNow = useCallback(() => {
    flushActivityQueue()
  }, [flushActivityQueue])

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    isEnabled: config.enabled,
    sessionId: sessionId.current,
    queueSize: activityQueue.length,
    
    // –ú–µ—Ç–æ–¥—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    trackAction,
    trackNumberSelection,
    trackPaymentStart,
    trackPaymentComplete,
    trackTicketScratch,
    trackAdminLogin,
    trackReservationCreate,
    trackReservationCancel,
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    flushNow
  }
}