import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'
import { SupabaseService } from '@/lib/supabaseService'
import { InstantTicket } from '@/lib/supabase'
import { toast } from 'sonner'

// –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∏–ª–µ—Ç–æ–≤ –ø–æ ID –∑–∞—è–≤–∫–∏
export function useInstantTickets(applicationId: string | undefined) {
  return useQuery({
    queryKey: ['instant-tickets', applicationId],
    queryFn: () => 
      applicationId 
        ? SupabaseService.getInstantTicketsByApplication(applicationId)
        : Promise.resolve([]),
    enabled: !!applicationId,
    staleTime: 1000, // –£–º–µ–Ω—å—à–∏–ª–∏ –¥–æ 1 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    refetchOnWindowFocus: true, // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –æ–∫–Ω–∞
    refetchInterval: 5000 // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
  })
}

// –•—É–∫ –¥–ª—è —Å—Ç–∏—Ä–∞–Ω–∏—è –±–∏–ª–µ—Ç–∞
export function useScratchTicket() {
  const queryClient = useQueryClient()

  return useMutation({
    mutationFn: async (ticketId: string) => {
      const success = await SupabaseService.scratchTicket(ticketId)
      if (!success) {
        throw new Error('No se pudo raspar el billete')
      }
      return success
    },
    onMutate: async (ticketId) => {
      console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è:', ticketId)
      
      // –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
      await queryClient.cancelQueries({ queryKey: ['instant-tickets'] })
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
      const previousTickets = queryClient.getQueriesData({ queryKey: ['instant-tickets'] })
      
      // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à - –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –±–∏–ª–µ—Ç –µ—â–µ –Ω–µ —Å—Ç–µ—Ä—Ç
      queryClient.setQueriesData({ queryKey: ['instant-tickets'] }, (oldData: any) => {
        if (!Array.isArray(oldData)) return oldData
        
        return oldData.map((ticket: InstantTicket) => 
          ticket.id === ticketId && !ticket.is_scratched // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å—Ç–µ—Ä—Ç
            ? { ...ticket, is_scratched: true, updated_at: new Date().toISOString() }
            : ticket
        )
      })
      
      console.log('üîÑ –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–ª—è –±–∏–ª–µ—Ç–∞:', ticketId)
      
      return { previousTickets }
    },
    onSuccess: (_, ticketId) => {
      console.log('‚úÖ –ë–∏–ª–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å—Ç–µ—Ä—Ç –≤ –ë–î:', ticketId)
      
      // –û—á–∏—â–∞–µ–º localStorage —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å –ë–î
      localStorage.removeItem(`ticket_${ticketId}_scratched`)
      console.log('üßπ localStorage –æ—á–∏—â–µ–Ω –¥–ª—è –±–∏–ª–µ—Ç–∞:', ticketId)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫—ç—à–∏ –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      queryClient.invalidateQueries({ queryKey: ['instant-tickets'] })
      queryClient.invalidateQueries({ queryKey: ['instant-tickets-admin'] })
      queryClient.invalidateQueries({ queryKey: ['instant-tickets-stats'] })
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      queryClient.refetchQueries({ queryKey: ['instant-tickets'] })
      queryClient.refetchQueries({ queryKey: ['instant-tickets-admin'] })
      queryClient.refetchQueries({ queryKey: ['instant-tickets-stats'] })
      
      console.log('‚ú® –í—Å–µ –∫—ç—à–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ –±–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è')
    },
    onError: (error, ticketId, context) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∏—Ä–∞–Ω–∏–∏ –±–∏–ª–µ—Ç–∞:', error)
      
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
      if (context?.previousTickets) {
        context.previousTickets.forEach(([queryKey, data]) => {
          queryClient.setQueryData(queryKey, data)
        })
      }
      
      toast.error('Error al raspar billete', {
        description: 'Int√©ntalo de nuevo'
      })
    }
  })
}

// –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞
export function useClaimPrize() {
  const queryClient = useQueryClient()

  return useMutation({
    mutationFn: async (ticketId: string) => {
      console.log('üîÑ –í—ã–∑–æ–≤ –º—É—Ç–∞—Ü–∏–∏ claimPrize –¥–ª—è –±–∏–ª–µ—Ç–∞:', ticketId)
      const success = await SupabaseService.claimPrize(ticketId)
      if (!success) {
        throw new Error('No se pudo reclamar el premio')
      }
      console.log('‚úÖ –ú—É—Ç–∞—Ü–∏—è claimPrize —É—Å–ø–µ—à–Ω–∞ –¥–ª—è –±–∏–ª–µ—Ç–∞:', ticketId)
      return success
    },
    onSuccess: (data, ticketId) => {
      console.log('üéâ onSuccess: –ü—Ä–∏–∑ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–ª–∞—á–µ–Ω –¥–ª—è –±–∏–ª–µ—Ç–∞:', ticketId)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≤—Å–µ—Ö instant tickets
      queryClient.invalidateQueries({ queryKey: ['instant-tickets'] })
      queryClient.invalidateQueries({ queryKey: ['instant-tickets-admin'] })
      queryClient.invalidateQueries({ queryKey: ['instant-tickets-stats'] })
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–µ—Ñ–µ—Ç—á–∏–º
      queryClient.refetchQueries({ queryKey: ['instant-tickets-admin'] })
      queryClient.refetchQueries({ queryKey: ['instant-tickets-stats'] })
      
      toast.success('¬°Premio reclamado!', {
        description: 'El premio ha sido marcado como entregado'
      })
      
      console.log('‚úÖ –ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –≤—ã–ø–ª–∞—Ç—ã –ø—Ä–∏–∑–∞')
    },
    onError: (error, ticketId) => {
      console.error('‚ùå onError: Error al reclamar premio:', error, 'para billete:', ticketId)
      toast.error('Error al reclamar premio', {
        description: 'Contacta con soporte'
      })
    }
  })
}

// –•—É–∫ –¥–ª—è –∞–¥–º–∏–Ω–∞ - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –±–∏–ª–µ—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
export function useInstantTicketsAdmin(filters?: {
  is_winner?: boolean
  is_scratched?: boolean  
  is_claimed?: boolean
  limit?: number
}) {
  return useQuery({
    queryKey: ['instant-tickets-admin', filters],
    queryFn: () => SupabaseService.getAllInstantTickets(filters),
    staleTime: 5000, // 5 —Å–µ–∫—É–Ω–¥ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    refetchOnWindowFocus: true, // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –æ–∫–Ω–∞
    refetchInterval: 10000 // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
  })
}

// –•—É–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∏–ª–µ—Ç–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
export function useInstantTicketsStats() {
  return useQuery({
    queryKey: ['instant-tickets-stats'],
    queryFn: () => SupabaseService.getInstantTicketsStats(),
    staleTime: 300000, // 5 –º–∏–Ω—É—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    refetchOnWindowFocus: false
  })
}

// –•—É–∫ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –±–∏–ª–µ—Ç–æ–≤ –ø–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º
export function useInstantTicketsGroupedByDraw() {
  return useQuery({
    queryKey: ['instant-tickets-grouped-by-draw'],
    queryFn: async () => {
      const tickets = await SupabaseService.getAllInstantTickets()
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –±–∏–ª–µ—Ç—ã –ø–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º
      const grouped = tickets.reduce((acc, ticket) => {
        const drawKey = ticket.draw_id || 'no-draw'
        const drawName = ticket.draw_name || 'Sin sorteo asignado'
        
        if (!acc[drawKey]) {
          acc[drawKey] = {
            draw_id: ticket.draw_id,
            draw_name: drawName,
            draw_date: ticket.draw_date,
            draw_status: ticket.draw_status,
            draw_prize_description: ticket.draw_prize_description,
            draw_winner_number: ticket.draw_winner_number,
            draw_winner_name: ticket.draw_winner_name,
            tickets: []
          }
        }
        
        acc[drawKey].tickets.push(ticket)
        return acc
      }, {} as Record<string, {
        draw_id: string | null
        draw_name: string
        draw_date?: string
        draw_status?: string
        draw_prize_description?: string
        draw_winner_number?: number
        draw_winner_name?: string
        tickets: any[]
      }>)
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∞—Å—Å–∏–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–∞–º–æ–π –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –≤ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ
      return Object.values(grouped).sort((a, b) => {
        // –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É—é –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –≤ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ
        const getLatestTicketDate = (tickets: any[]) => {
          return Math.max(...tickets.map(ticket => new Date(ticket.created_at).getTime()))
        }
        
        const latestDateA = getLatestTicketDate(a.tickets)
        const latestDateB = getLatestTicketDate(b.tickets)
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é (–Ω–æ–≤—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏ —Å–≤–µ—Ä—Ö—É)
        return latestDateB - latestDateA
      })
    },
    refetchInterval: 10000, // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    staleTime: 5000 // –î–∞–Ω–Ω—ã–µ —Å—á–∏—Ç–∞—é—Ç—Å—è —Å–≤–µ–∂–∏–º–∏ 5 —Å–µ–∫—É–Ω–¥
  })
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∏–ª–µ—Ç–∞–º–∏
export const InstantTicketUtils = {
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã –ø—Ä–∏–∑–∞
  formatPrizeAmount: (amount: number): string => {
    return new Intl.NumberFormat('es-VE', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 2
    }).format(amount)
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–∏–ø–∞ –ø—Ä–∏–∑–∞
  getPrizeTypeLabel: (prizeType: InstantTicket['prize_type']): string => {
    const labels = {
      'none': 'Sin premio',
      'small': 'Premio peque√±o',
      'medium': 'Premio mediano', 
      'large': 'Premio grande'
    }
    return labels[prizeType] || 'Desconocido'
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–∏–ø–∞ –ø—Ä–∏–∑–∞
  getPrizeTypeColor: (prizeType: InstantTicket['prize_type']): string => {
    const colors = {
      'none': 'text-gray-400',
      'small': 'text-green-400',
      'medium': 'text-yellow-400',
      'large': 'text-red-400'
    }
    return colors[prizeType] || 'text-gray-400'
  },

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ —Å—Ç–µ—Ä–µ—Ç—å –±–∏–ª–µ—Ç
  canScratch: (ticket: InstantTicket): boolean => {
    return !ticket.is_scratched
  },

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑
  canClaim: (ticket: InstantTicket): boolean => {
    return ticket.is_winner && ticket.is_scratched && !ticket.is_claimed
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–∏–ª–µ—Ç–∞
  getTicketStatus: (ticket: InstantTicket): {
    status: 'unscratched' | 'no_prize' | 'winner_unclaimed' | 'winner_claimed'
    label: string
    color: string
  } => {
    if (!ticket.is_scratched) {
      return {
        status: 'unscratched',
        label: 'Por raspar',
        color: 'text-blue-400'
      }
    }
    
    if (!ticket.is_winner) {
      return {
        status: 'no_prize',
        label: 'Sin premio',
        color: 'text-gray-400'
      }
    }
    
    if (!ticket.is_claimed) {
      return {
        status: 'winner_unclaimed',
        label: '¬°Ganador! - No reclamado',
        color: 'text-green-400'
      }
    }
    
    return {
      status: 'winner_claimed',
      label: 'Premio entregado',
      color: 'text-purple-400'
    }
  }
}