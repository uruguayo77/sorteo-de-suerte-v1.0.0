import { useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/lib/supabase';
import { useToast } from '@/hooks/use-toast';

export const useBlockAllNumbers = () => {
  const queryClient = useQueryClient();
  const { toast } = useToast();

  return useMutation({
    mutationFn: async () => {
      console.log('üöÄ Iniciando bloqueo de todos los n√∫meros...');
      
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à
      const { data: activeLottery, error: lotteryError } = await supabase
        .from('lottery_draws')
        .select('id')
        .eq('status', 'active')
        .single();

      if (lotteryError) {
        console.error('‚ùå Error obteniendo sorteo activo:', lotteryError);
        throw new Error('Error obteniendo sorteo activo: ' + lotteryError.message);
      }

      if (!activeLottery) {
        console.error('‚ùå No se encontr√≥ sorteo activo');
        throw new Error('No se encontr√≥ un sorteo activo');
      }

      console.log('‚úÖ Sorteo activo encontrado:', activeLottery.id);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –Ω–æ–º–µ—Ä–∞ —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã
      const { data: existingApplications, error: checkError } = await supabase
        .from('applications')
        .select('number')
        .eq('draw_id', activeLottery.id);

      if (checkError) {
        console.error('‚ùå Error verificando n√∫meros existentes:', checkError);
        throw new Error('Error verificando n√∫meros existentes: ' + checkError.message);
      }

      const existingNumbers = new Set(existingApplications?.map(app => app.number) || []);
      console.log(`üìä N√∫meros ya bloqueados: ${existingNumbers.size}/100`);

      // –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –Ω–æ–º–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ—Ç
      const applications = [];
      for (let i = 1; i <= 100; i++) {
        if (!existingNumbers.has(i)) {
          applications.push({
            draw_id: activeLottery.id,
            number: i,
            status: 'approved',
            created_by: null, // –ò—Å–ø–æ–ª—å–∑—É–µ–º null –≤–º–µ—Å—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ UUID
            full_name: 'TEST USER',
            phone: '000-000-0000',
            email: 'test@test.com',
            bank_account: '0000000000',
            bank_name: 'TEST BANK',
            payment_reference: 'TEST-REF-' + i,
            reserved_until: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString() // +24 —á–∞—Å–∞
          });
        }
      }

      console.log(`üìù Creando ${applications.length} nuevas aplicaciones...`);

      if (applications.length === 0) {
        console.log('‚ÑπÔ∏è Todos los n√∫meros ya est√°n bloqueados');
        return { success: true, message: 'Todos los n√∫meros ya estaban bloqueados' };
      }

      // –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫–∏ –ø–∞–∫–µ—Ç–∞–º–∏ –ø–æ 10 (–¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤)
      const batchSize = 10;
      for (let i = 0; i < applications.length; i += batchSize) {
        const batch = applications.slice(i, i + batchSize);
        console.log(`üì¶ Insertando lote ${Math.floor(i/batchSize) + 1}/${Math.ceil(applications.length/batchSize)}...`);
        
        const { error: insertError } = await supabase
          .from('applications')
          .insert(batch);

        if (insertError) {
          console.error('‚ùå Error insertando lote:', insertError);
          throw new Error(`Error insertando n√∫meros ${i+1}-${i+batch.length}: ${insertError.message}`);
        }
      }

      console.log('‚úÖ Todos los n√∫meros bloqueados exitosamente');
      return { success: true, created: applications.length };
    },
    onSuccess: (data) => {
      console.log('üéâ Operaci√≥n completada:', data);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫—ç—à–∏
      queryClient.invalidateQueries({ queryKey: ['activeLotteryStats'] });
      queryClient.invalidateQueries({ queryKey: ['applications'] });
      queryClient.invalidateQueries({ queryKey: ['reservedNumbers'] });
      
      toast({
        title: "¬°N√∫meros bloqueados!",
        description: data?.created ? 
          `Se bloquearon ${data.created} n√∫meros nuevos` : 
          "Todos los n√∫meros ya estaban bloqueados",
        variant: "default",
      });
    },
    onError: (error: any) => {
      const errorMessage = error?.message || error?.toString() || "Error desconocido";
      console.error('‚ùå Error blocking all numbers:', errorMessage);
      console.error('‚ùå Error object:', error);
      
      toast({
        title: "Error",
        description: errorMessage,
        variant: "destructive",
      });
    },
  });
}; 