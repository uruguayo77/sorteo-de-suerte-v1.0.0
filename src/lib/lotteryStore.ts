import { create } from 'zustand';
import { persist } from 'zustand/middleware';
import { SupabaseService } from './supabaseService';
import { supabase } from './supabase';

export interface LotteryHistory {
  id: string;
  lotteryNumber: number; // –ù–æ–º–µ—Ä —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
  name: string;
  prizeAmount: string;
  startTime: Date;
  endTime: Date;
  plannedDuration: number; // –≤ –º–∏–Ω—É—Ç–∞—Ö
  actualDuration: number; // –≤ –º–∏–Ω—É—Ç–∞—Ö
  winnerNumber: number | null;
  status: 'completed' | 'cancelled' | 'no_winner';
  totalParticipants: number;
  participantNumbers: number[]; // —á–∏—Å–ª–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–±—Ä–∞–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏
  reason?: string; // –ø—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
}

export interface LotteryState {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
  isActive: boolean;
  isPaused: boolean;
  isCompleted: boolean;
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–µ—Ä–∞
  endTime: Date | null;
  startTime: Date | null;
  duration: number; // –≤ –º–∏–Ω—É—Ç–∞—Ö
  
  // –î–∞–Ω–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
  lotteryNumber: number; // –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
  lotteryName: string;
  prizeAmount: string;
  selectedNumbers: number[];
  winnerNumber: number | null;
  activeLotteryId: string | null; // ID –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –≤ –ë–î
  
  // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
  showWinnerModal: boolean;
  
  // –ò—Å—Ç–æ—Ä–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π (–∫—ç—à)
  history: LotteryHistory[];
  isHistoryLoading: boolean;
  
  // –î–µ–π—Å—Ç–≤–∏—è
  startLottery: (name: string, prize: string, durationMinutes: number) => Promise<void>;
  pauseLottery: () => Promise<void>;
  resumeLottery: () => Promise<void>;
  stopLottery: () => Promise<void>;
  restartLottery: () => Promise<void>;
  setWinner: (number: number) => Promise<void>;
  completeLottery: () => Promise<void>;
  cancelLottery: (reason?: string) => Promise<void>;
  deleteLottery: () => Promise<void>;
  resetLottery: () => void;
  
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏
  updateSelectedNumbers: (numbers: number[]) => Promise<void>;
  
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
  openWinnerModal: () => void;
  closeWinnerModal: () => void;
  
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–µ–º
  setDuration: (minutes: number) => void;
  addTime: (minutes: number) => Promise<void>;
  subtractTime: (minutes: number) => Promise<void>;
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
  getRemainingTime: () => number;
  
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–µ–π —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
  loadHistory: () => Promise<void>;
  getHistory: () => LotteryHistory[];
  clearHistory: () => Promise<void>;
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
  initializeFromDatabase: () => Promise<void>;
  syncWithDatabase: () => Promise<void>;
}

export const useLotteryStore = create<LotteryState>()(
  persist(
    (set, get) => ({
      // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      isActive: false,
      isPaused: false,
      isCompleted: false,
      endTime: null,
      startTime: null,
      duration: 60, // –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ lottery_settings –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      lotteryNumber: 0, // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
      lotteryName: '',
      prizeAmount: '',
      selectedNumbers: [],
      winnerNumber: null,
      activeLotteryId: null,
      showWinnerModal: false,
      history: [],
      isHistoryLoading: false,

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      initializeFromDatabase: async () => {
        console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
          const isConnected = await SupabaseService.testConnection();
          if (!isConnected) {
            console.warn('‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase, —Ä–∞–±–æ—Ç–∞–µ–º –æ—Ñ—Ñ–ª–∞–π–Ω');
            return;
          }

          // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ lottery_settings
          try {
            const { data: defaultDurationSetting } = await supabase
              .from('lottery_settings')
              .select('setting_value')
              .eq('setting_key', 'default_duration_minutes')
              .single();
            
            if (defaultDurationSetting) {
              const defaultDuration = parseInt(defaultDurationSetting.setting_value) || 60;
              set(state => ({ ...state, duration: defaultDuration }));
              console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–≥—Ä—É–∂–µ–Ω—ã, duration:', defaultDuration);
            }
          } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', error);
          }

          // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à
          const activeLottery = await SupabaseService.getActiveLottery();
          if (activeLottery) {
            set({
              isActive: activeLottery.is_active,
              isPaused: activeLottery.is_paused,
              isCompleted: activeLottery.is_completed,
              lotteryNumber: activeLottery.lottery_number, // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–º–µ—Ä —Ä–æ–∑—ã–≥—Ä—ã—à–∞
              lotteryName: activeLottery.name,
              prizeAmount: activeLottery.prize_amount,
              duration: activeLottery.duration_minutes,
              startTime: new Date(activeLottery.start_time),
              endTime: new Date(activeLottery.end_time),
              winnerNumber: activeLottery.winner_number,
              selectedNumbers: activeLottery.selected_numbers || [],
              activeLotteryId: activeLottery.id
            });
            
            console.log('‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à –∑–∞–≥—Ä—É–∂–µ–Ω:', activeLottery.name);
          }

          // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
          await get().loadHistory();
          
          console.log('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        }
      },

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
      syncWithDatabase: async () => {
        try {
          const state = get();
          if (!state.activeLotteryId) return;

          await SupabaseService.updateActiveLottery({
            is_active: state.isActive,
            is_paused: state.isPaused,
            is_completed: state.isCompleted,
            winner_number: state.winnerNumber,
            selected_numbers: state.selectedNumbers,
            end_time: state.endTime?.toISOString()
          });
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
        }
      },

      // –ù–∞—á–∞–ª–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
      startLottery: async (name: string, prizeAmount: string, duration: number) => {
        console.log('üéØ lotteryStore.startLottery –≤—ã–∑–≤–∞–Ω —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', { name, prizeAmount, duration });
        
        const startTime = new Date()
        const endTime = new Date(startTime.getTime() + duration * 60000) // –º–∏–Ω—É—Ç—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        
        console.log('üìÖ –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è:', { 
          startTime: startTime.toISOString(), 
          endTime: endTime.toISOString(),
          durationMs: duration * 60000
        });

        try {
          console.log('üîó –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à –≤ –ë–î...');
          
          // –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à –≤ –ë–î
          const lotteryId = await SupabaseService.createActiveLottery({
            name,
            prize_amount: prizeAmount,
            start_time: startTime,
            end_time: endTime,
            duration_minutes: duration
          });

          console.log('üìù SupabaseService.createActiveLottery –≤–µ—Ä–Ω—É–ª:', lotteryId);

          if (!lotteryId) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à –≤ –ë–î - lotteryId –ø—É—Å—Ç–æ–π');
            return;
          }

          console.log('üíæ –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ...');
          
          set({
            isActive: true,
            isPaused: false,
            isCompleted: false,
            lotteryNumber: get().lotteryNumber + 1, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ä–æ–∑—ã–≥—Ä—ã—à–∞
            lotteryName: name,
            prizeAmount: prizeAmount,
            duration: duration,
            startTime: startTime,
            endTime: endTime,
            winnerNumber: null,
            selectedNumbers: [],
            activeLotteryId: lotteryId
          });

          console.log('‚úÖ –†–æ–∑—ã–≥—Ä—ã—à –∑–∞–ø—É—â–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î:', name);
          console.log('üé≤ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ store:', get());
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –≤ store:', error);
          console.error('üìä Stack trace:', error.stack);
          throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
        }
      },

      // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
      stopLottery: async () => {
        try {
          const { lotteryName } = get();
          
          // –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à –≤ –ë–î
          const success = await SupabaseService.completeActiveLottery(
            null, 
            'cancelled', 
            '–†–æ–∑—ã–≥—Ä—ã—à –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
          );

          if (success) {
            set({
              isActive: false,
              isPaused: false,
              isCompleted: true,
              activeLotteryId: null
            });

            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            await get().loadHistory();

            console.log('‚úÖ –†–æ–∑—ã–≥—Ä—ã—à –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é');
          } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞');
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤ stopLottery:', error);
        }
      },

      // –ü–∞—É–∑–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
      pauseLottery: async () => {
        try {
          const success = await SupabaseService.updateActiveLottery({ 
            is_paused: true 
          });

          if (success) {
            set({ isPaused: true });
            console.log('‚úÖ –†–æ–∑—ã–≥—Ä—ã—à –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É');
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤ pauseLottery:', error);
        }
      },

      // –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
      resumeLottery: async () => {
        try {
          const success = await SupabaseService.updateActiveLottery({ 
            is_paused: false 
          });

          if (success) {
            set({ isPaused: false });
            console.log('‚úÖ –†–æ–∑—ã–≥—Ä—ã—à –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω');
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤ resumeLottery:', error);
        }
      },

      // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
      restartLottery: async () => {
        try {
          const { lotteryName, prizeAmount, duration } = get();
          
          // –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π
          await get().stopLottery();
          
          // –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
          await get().startLottery(lotteryName, prizeAmount, duration);
          
          console.log('‚úÖ –†–æ–∑—ã–≥—Ä—ã—à –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω');
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤ restartLottery:', error);
        }
      },

      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
      setWinner: async (winnerNumber: number) => {
        try {
          // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
          const success = await SupabaseService.updateActiveLottery({ 
            winner_number: winnerNumber,
            is_completed: true, // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à
            is_active: false // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à
          });
 
          if (success) {
            set({ 
              winnerNumber,
              isCompleted: true,
              isActive: false, // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
              showWinnerModal: true // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            });
            
            // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            await SupabaseService.completeActiveLottery(
              winnerNumber,
              'completed',
              undefined
            );
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∏—Å–ª–∞
            await get().updateSelectedNumbers([]);
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            await get().loadHistory();
            
            console.log('‚úÖ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Ä–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à–µ–Ω:', winnerNumber);
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤ setWinner:', error);
        }
      },

      // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
      completeLottery: async () => {
        try {
          const { winnerNumber } = get();
          
          // –ó–∞–≤–µ—Ä—à–∞–µ–º –≤ –ë–î
          const success = await SupabaseService.completeActiveLottery(
            winnerNumber,
            winnerNumber ? 'completed' : 'no_winner',
            winnerNumber ? undefined : '–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à–µ–Ω –±–µ–∑ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è'
          );

          if (success) {
            set({
              isActive: false,
              isPaused: false,
              isCompleted: true,
              activeLotteryId: null
            });

            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            await get().loadHistory();

            console.log('‚úÖ –†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à–µ–Ω');
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤ completeLottery:', error);
        }
      },

      // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
      deleteLottery: async () => {
        try {
          const { isActive } = get();
          
          if (!isActive) {
            console.warn('‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
            return;
          }

          // –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à –∏–∑ –ë–î
          const success = await SupabaseService.deleteActiveLottery();

          if (success) {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            set({
              isActive: false,
              isPaused: false,
              isCompleted: false,
              endTime: null,
              startTime: null,
              lotteryName: '',
              prizeAmount: '',
              selectedNumbers: [],
              winnerNumber: null,
              activeLotteryId: null,
              showWinnerModal: false
            });

            console.log('‚úÖ –†–æ–∑—ã–≥—Ä—ã—à —É–¥–∞–ª–µ–Ω');
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤ deleteLottery:', error);
          throw error;
        }
      },

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
      updateSelectedNumbers: async (numbers: number[]) => {
        try {
          // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
          const success = await SupabaseService.updateActiveLottery({ 
            selected_numbers: numbers 
          });

          if (success) {
            set({ selectedNumbers: numbers });
            console.log('‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', numbers);
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤ updateSelectedNumbers:', error);
        }
      },

      // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
      deleteHistoryEntry: async (id: string) => {
        try {
          const success = await SupabaseService.deleteHistoryEntry(id);
          
          if (success) {
            set((state) => ({
              history: state.history.filter(entry => entry.id !== id)
            }));
            console.log('‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏:', id);
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤ deleteHistoryEntry:', error);
        }
      },

      // –°–±—Ä–æ—Å –≤—Å–µ–≥–æ
      resetLottery: () => {
        set({
          isActive: false,
          isPaused: false,
          isCompleted: false,
          endTime: null,
          startTime: null,
          duration: 60,
          lotteryNumber: 0, // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ä–æ–∑—ã–≥—Ä—ã—à–∞
          lotteryName: '',
          prizeAmount: '',
          selectedNumbers: [],
          winnerNumber: null,
          activeLotteryId: null,
          showWinnerModal: false // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        });
      },

      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      setDuration: (minutes: number) => {
        set({ duration: minutes });
      },

      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
      addTime: async (minutes: number) => {
        const state = get();
        if (state.endTime) {
          const newEndTime = new Date(state.endTime);
          newEndTime.setMinutes(newEndTime.getMinutes() + minutes);
          set({ endTime: newEndTime });
          
          // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –ë–î
          await get().syncWithDatabase();
        }
      },

      // –£–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
      subtractTime: async (minutes: number) => {
        const state = get();
        if (state.endTime) {
          const newEndTime = new Date(state.endTime);
          newEndTime.setMinutes(newEndTime.getMinutes() - minutes);
          
          // –ù–µ –ø–æ–∑–≤–æ–ª—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –≤ –ø—Ä–æ—à–ª–æ–µ
          if (newEndTime > new Date()) {
            set({ endTime: newEndTime });
            
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –ë–î
            await get().syncWithDatabase();
          }
        }
      },

      // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
      getRemainingTime: () => {
        const state = get();
        if (!state.endTime || !state.isActive || state.isPaused) return 0;
        
        const now = new Date().getTime();
        const end = new Date(state.endTime).getTime();
        const remaining = end - now;
        
        return remaining > 0 ? remaining : 0;
      },

      // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ –ë–î
      loadHistory: async () => {
        console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ –ë–î...')
        set({ isHistoryLoading: true })
        try {
          const history = await SupabaseService.getLotteryHistory();
          set({ history, isHistoryLoading: false });
          
          console.log(`‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${history.length} –∑–∞–ø–∏—Å–µ–π`);
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error)
          set({ isHistoryLoading: false })
        }
      },

      // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ (–∏–∑ –∫—ç—à–∞)
      getHistory: () => {
        const state = get();
        return state.history;
      },

      // –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
      clearHistory: async () => {
        try {
          const success = await SupabaseService.clearHistory();
          
          if (success) {
            set({ history: [] });
            console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞ –≤ –ë–î –∏ –ª–æ–∫–∞–ª—å–Ω–æ');
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
        }
      },

      // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
      openWinnerModal: () => {
        set({ showWinnerModal: true });
      },

      // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
      closeWinnerModal: () => {
        set({ showWinnerModal: false });
      }
    }),
    {
      name: 'lottery-storage',
      skipHydration: true,
      // –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
      partialize: (state) => ({
        duration: state.duration,
        // –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º activeData, –≤—Å–µ–≥–¥–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î
      })
    }
  )
);

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ store
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏–∏
if (typeof window !== 'undefined') {
  // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏—é –∏ –∑–∞—Ç–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
  setTimeout(() => {
    useLotteryStore.getState().initializeFromDatabase();
  }, 100);
} 