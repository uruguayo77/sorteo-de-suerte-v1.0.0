/**
 * AnalyticsService - –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
 */

import { supabase } from './supabase'

// –¢–∏–ø—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
export interface UserActivityLog {
  id: string
  session_id: string
  user_ip?: string
  user_agent?: string
  page_visited: string
  action_type: 'page_visit' | 'number_select' | 'payment_start' | 'payment_complete' | 'ticket_scratch' | 'admin_login' | 'reservation_create' | 'reservation_cancel'
  metadata: Record<string, any>
  created_at: string
}

export interface ActiveUser {
  session_id: string
  user_ip?: string
  user_agent?: string
  page_views: number
  last_activity: string
  time_since_activity: string
  pages_visited: string[]
  actions_performed: string[]
}

export interface ActiveReservation {
  id: string
  user_name: string
  user_phone: string
  cedula: string
  numbers: number[]
  reservation_started_at?: string
  reservation_expires_at?: string
  draw_name?: string
  draw_date?: string
  query_time: string
  time_remaining?: string
  reservation_status: 'no_timer' | 'expired' | 'expiring_soon' | 'expiring_warning' | 'active'
  seconds_remaining?: number
}

export interface ConversionStats {
  date: string
  reservations_created: number
  reservations_paid: number
  reservations_expired: number
  conversion_rate_percent: number
  overall_success_rate: number
}

export interface HourlyActivity {
  date: string
  hour: number
  total_actions: number
  unique_users: number
  page_visits: number
  number_selections: number
  payment_starts: number
  payment_completions: number
}

export interface RealtimeAnalytics {
  users_online: number
  active_reservations: number
  expiring_reservations: number
  todays_conversion_rate: number
  hourly_activity: number
  last_updated: string
}

export class AnalyticsService {
  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async logUserActivity(data: {
    session_id: string
    page_visited: string
    action_type: UserActivityLog['action_type']
    user_ip?: string
    user_agent?: string
    metadata?: Record<string, any>
  }): Promise<boolean> {
    try {
      console.log('üìä –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', data.action_type, '–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:', data.page_visited)
      
      const { error } = await supabase
        .from('user_activity_log')
        .insert({
          session_id: data.session_id,
          page_visited: data.page_visited,
          action_type: data.action_type,
          user_ip: data.user_ip,
          user_agent: data.user_agent || navigator.userAgent,
          metadata: data.metadata || {}
        })

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error)
        return false
      }

      console.log('‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞')
      return true
    } catch (error) {
      console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error)
      return false
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç)
   */
  static async getActiveUsers(): Promise<ActiveUser[]> {
    try {
      const { data, error } = await supabase
        .rpc('get_active_users_public')

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error)
        throw error
      }

      console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', data?.length || 0)
      return data || []
    } catch (error) {
      console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error)
      return []
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π —Å countdown
   */
  static async getActiveReservations(): Promise<ActiveReservation[]> {
    try {
      const { data, error } = await supabase
        .rpc('get_active_reservations_public')

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', error)
        throw error
      }

      console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', data?.length || 0)
      return data || []
    } catch (error) {
      console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', error)
      return []
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
   */
  static async getConversionStats(): Promise<ConversionStats[]> {
    try {
      const { data, error } = await supabase
        .from('v_conversion_stats')
        .select('*')
        .limit(30) // –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏:', error)
        throw error
      }

      console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏:', data?.length || 0, '–¥–Ω–µ–π')
      return data || []
    } catch (error) {
      console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏:', error)
      return []
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—á–∞—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   */
  static async getHourlyActivity(): Promise<HourlyActivity[]> {
    try {
      const { data, error } = await supabase
        .from('v_hourly_activity')
        .select('*')
        .limit(168) // 7 –¥–Ω–µ–π * 24 —á–∞—Å–∞

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—á–∞—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error)
        throw error
      }

      console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –ø–æ—á–∞—Å–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:', data?.length || 0, '–∑–∞–ø–∏—Å–µ–π')
      return data || []
    } catch (error) {
      console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—á–∞—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error)
      return []
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (—á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é –ë–î)
   */
  static async getRealtimeAnalytics(): Promise<RealtimeAnalytics | null> {
    try {
      console.log('üìä –ó–∞–ø—Ä–æ—Å real-time –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...')

      const { data, error } = await supabase
        .rpc('get_realtime_analytics')

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è real-time –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error)
        throw error
      }

      console.log('‚úÖ Real-time –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:', data)
      return data as RealtimeAnalytics
    } catch (error) {
      console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ real-time –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error)
      return null
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
   */
  static async getActivityLogs(filters?: {
    action_type?: string
    page_visited?: string
    session_id?: string
    date_from?: string
    date_to?: string
    limit?: number
  }): Promise<UserActivityLog[]> {
    try {
      let query = supabase
        .from('user_activity_log')
        .select('*')
        .order('created_at', { ascending: false })

      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
      if (filters?.action_type) {
        query = query.eq('action_type', filters.action_type)
      }
      if (filters?.page_visited) {
        query = query.eq('page_visited', filters.page_visited)
      }
      if (filters?.session_id) {
        query = query.eq('session_id', filters.session_id)
      }
      if (filters?.date_from) {
        query = query.gte('created_at', filters.date_from)
      }
      if (filters?.date_to) {
        query = query.lte('created_at', filters.date_to)
      }
      if (filters?.limit) {
        query = query.limit(filters.limit)
      } else {
        query = query.limit(1000) // –ª–∏–º–∏—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      }

      const { data, error } = await query

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error)
        throw error
      }

      console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ª–æ–≥–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', data?.length || 0)
      return data || []
    } catch (error) {
      console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error)
      return []
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ (–≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –ë–î)
   */
  static async cleanupOldLogs(): Promise<number> {
    try {
      console.log('üßπ –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤...')

      const { data, error } = await supabase
        .rpc('cleanup_old_activity_logs')

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤:', error)
        throw error
      }

      const deletedCount = data as number
      console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:', deletedCount)
      return deletedCount
    } catch (error) {
      console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–≥–æ–≤:', error)
      return 0
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static generateSessionId(): string {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π session_id
    const existingSessionId = localStorage.getItem('analytics_session_id')
    if (existingSessionId) {
      return existingSessionId
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π session_id
    const sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
    localStorage.setItem('analytics_session_id', sessionId)
    
    console.log('üÜî –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞:', sessionId)
    return sessionId
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
   */
  static async getUserIP(): Promise<string | null> {
    try {
      // –î–ª—è –¥–µ–º–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É, –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è IP
      return '127.0.0.1'
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IP:', error)
      return null
    }
  }

  /**
   * –ú–∞—Å—Å–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (batch) –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  static async logBatchActivity(activities: Array<{
    session_id: string
    page_visited: string
    action_type: UserActivityLog['action_type']
    user_ip?: string
    user_agent?: string
    metadata?: Record<string, any>
  }>): Promise<boolean> {
    try {
      if (activities.length === 0) return true

      console.log('üìä Batch –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:', activities.length, '–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π')

      const { error } = await supabase
        .from('user_activity_log')
        .insert(activities.map(activity => ({
          session_id: activity.session_id,
          page_visited: activity.page_visited,
          action_type: activity.action_type,
          user_ip: activity.user_ip,
          user_agent: activity.user_agent || navigator.userAgent,
          metadata: activity.metadata || {}
        })))

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ batch –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:', error)
        return false
      }

      console.log('‚úÖ Batch –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
      return true
    } catch (error) {
      console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ batch –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏:', error)
      return false
    }
  }
}