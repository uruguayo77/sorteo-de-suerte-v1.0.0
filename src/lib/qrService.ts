import QRCode from 'qrcode'
import { supabase } from './supabase'

export interface QRVerificationData {
  id: string
  numbers: number[]
  user_name: string
  user_phone: string
  cedula: string
  payment_method: string
  payment_proof_url?: string
  status: 'pending' | 'approved' | 'rejected'
  admin_notes?: string
  created_at: string
  updated_at: string
  qr_generated_at?: string
  draw_name?: string
  draw_status?: string
  is_winner: boolean
  winner_number?: number
}

class QRService {
  private baseUrl: string

  constructor() {
    // URL base –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ QR –∫–æ–¥–æ–≤
    this.baseUrl = window.location.origin
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç QR –∫–æ–¥ –¥–ª—è –∑–∞—è–≤–∫–∏
   */
  async generateQRCode(applicationId: string): Promise<string> {
    try {
      // –°–æ–∑–¥–∞–µ–º QR —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ RPC —Ñ—É–Ω–∫—Ü–∏—é
      const { data, error } = await supabase.rpc('create_qr_token_for_application', {
        application_id_input: applicationId
      })

      if (error) {
        console.error('Error creating QR token:', error)
        console.error('Error details:', {
          message: error.message,
          code: error.code,
          details: error.details,
          hint: error.hint
        })
        throw new Error(`No se pudo crear el c√≥digo QR: ${error.message || 'Error desconocido'}`)
      }

      const qrToken = data
      
      // URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ QR —Å —Ç–æ–∫–µ–Ω–æ–º
      const verificationUrl = `${this.baseUrl}/verificar?token=${qrToken}`
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥
      const qrCodeDataUrl = await QRCode.toDataURL(verificationUrl, {
        errorCorrectionLevel: 'M',
        type: 'image/png',
        quality: 0.92,
        margin: 1,
        color: {
          dark: '#1f2937', // –¢–µ–º–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è QR
          light: '#ffffff'  // –°–≤–µ—Ç–ª—ã–π —Ñ–æ–Ω
        },
        width: 256,
      })

      return qrCodeDataUrl
    } catch (error) {
      console.error('Error generating QR code:', error)
      throw new Error('No se pudo generar el c√≥digo QR')
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç QR —Ç–æ–∫–µ–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
   */
  async verifyQRToken(token: string): Promise<QRVerificationData | null> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –ø–æ QR —Ç–æ–∫–µ–Ω—É —á–µ—Ä–µ–∑ RPC —Ñ—É–Ω–∫—Ü–∏—é
      const { data, error } = await supabase.rpc('get_application_by_qr_token', {
        token_input: token
      })

      if (error) {
        console.error('Error verifying QR token:', error)
        console.error('Error details:', {
          message: error.message,
          code: error.code,
          details: error.details,
          hint: error.hint
        })
        throw new Error(`Error al verificar el c√≥digo QR: ${error.message || 'Error desconocido'}`)
      }

      if (!data || data.length === 0) {
        return null
      }

      const applicationData = data[0]

      // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É QR –∫–æ–¥–∞
      await this.logQRVerification(applicationData.id, token)

      return applicationData
    } catch (error) {
      console.error('Error verifying QR token:', error)
      throw new Error('No se pudo verificar el c√≥digo QR')
    }
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É QR –∫–æ–¥–∞
   */
  private async logQRVerification(applicationId: string, token: string): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
      const userAgent = navigator.userAgent
      
      const { error } = await supabase.rpc('log_qr_verification', {
        application_id_input: applicationId,
        token_input: token,
        ip_input: null, // IP –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        user_agent_input: userAgent
      })

      if (error) {
        console.error('Error logging QR verification:', error)
        // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
      }
    } catch (error) {
      console.error('Error logging QR verification:', error)
      // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
    }
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–∫–µ–Ω –∏–∑ URL
   */
  extractTokenFromUrl(url?: string): string | null {
    const urlToCheck = url || window.location.href
    
    try {
      const urlObj = new URL(urlToCheck)
      return urlObj.searchParams.get('token')
    } catch (error) {
      console.error('Error extracting token from URL:', error)
      return null
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ (–±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞)
   */
  isValidTokenFormat(token: string): boolean {
    if (!token || typeof token !== 'string') {
      return false
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–∫–µ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ-—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ –∏ –¥–µ—Ñ–∏—Å—ã
    const tokenRegex = /^[a-zA-Z0-9_-]+$/
    return tokenRegex.test(token) && token.length > 5 // –£–º–µ–Ω—å—à–∏–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  formatDate(dateString: string): string {
    try {
      return new Date(dateString).toLocaleDateString('es-ES', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      })
    } catch (error) {
      return dateString
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–æ–º
   */
  getStatusText(status: string): string {
    switch (status) {
      case 'pending':
        return 'Pendiente de confirmaci√≥n'
      case 'approved':
        return 'Confirmado y aprobado'
      case 'rejected':
        return 'Rechazado'
      default:
        return status
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
   */
  getStatusColor(status: string): string {
    switch (status) {
      case 'pending':
        return 'text-yellow-400'
      case 'approved':
        return 'text-green-400'
      case 'rejected':
        return 'text-red-400'
      default:
        return 'text-gray-400'
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
   */
  getStatusIcon(status: string): string {
    switch (status) {
      case 'pending':
        return '‚è≥'
      case 'approved':
        return '‚úÖ'
      case 'rejected':
        return '‚ùå'
      default:
        return '‚ùì'
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  formatNumbers(numbers: number[]): string {
    if (!Array.isArray(numbers) || numbers.length === 0) {
      return 'Sin n√∫meros'
    }

    return numbers.sort((a, b) => a - b).join(', ')
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
   */
  getWinnerText(isWinner: boolean, drawStatus?: string): string {
    if (drawStatus !== 'finished') {
      return 'El sorteo a√∫n no ha finalizado'
    }

    if (isWinner) {
      return 'üèÜ ¬°Felicidades! Eres el ganador de este sorteo'
    } else {
      return 'üòî Tu billete no result√≥ ganador esta vez. ¬°Mejor suerte la pr√≥xima!'
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
   */
  getWinnerColor(isWinner: boolean, drawStatus?: string): string {
    if (drawStatus !== 'finished') {
      return 'text-blue-400'
    }

    return isWinner ? 'text-green-400' : 'text-gray-400'
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const qrService = new QRService() 