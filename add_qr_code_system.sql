-- ================================
-- –ú–ò–ì–†–ê–¶–ò–Ø: –°–∏—Å—Ç–µ–º–∞ QR –∫–æ–¥–æ–≤ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫
-- ================================

-- 1. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è QR –∫–æ–¥–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É applications
ALTER TABLE applications 
ADD COLUMN IF NOT EXISTS qr_code_token VARCHAR(255) UNIQUE,
ADD COLUMN IF NOT EXISTS qr_generated_at TIMESTAMP WITH TIME ZONE;

-- 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫ QR –∫–æ–¥–æ–≤
CREATE TABLE IF NOT EXISTS qr_verifications (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  application_id UUID NOT NULL REFERENCES applications(id) ON DELETE CASCADE,
  qr_token VARCHAR(255) NOT NULL,
  verification_ip INET,
  user_agent TEXT,
  verified_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  
  CONSTRAINT fk_qr_verifications_application 
    FOREIGN KEY (application_id) REFERENCES applications(id)
);

-- 3. –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
CREATE INDEX IF NOT EXISTS idx_applications_qr_token ON applications(qr_code_token);
CREATE INDEX IF NOT EXISTS idx_qr_verifications_token ON qr_verifications(qr_token);
CREATE INDEX IF NOT EXISTS idx_qr_verifications_application ON qr_verifications(application_id);
CREATE INDEX IF NOT EXISTS idx_qr_verifications_verified_at ON qr_verifications(verified_at);

-- 4. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ QR —Ç–æ–∫–µ–Ω–∞
CREATE OR REPLACE FUNCTION generate_qr_token()
RETURNS VARCHAR(255) AS $$
DECLARE
  token_length INTEGER := 32;
  chars TEXT := 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  result VARCHAR(255) := '';
  i INTEGER;
  random_index INTEGER;
BEGIN
  -- –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç—Ä–æ–∫—É
  FOR i IN 1..token_length LOOP
    random_index := floor(random() * length(chars) + 1);
    result := result || substr(chars, random_index, 1);
  END LOOP;
  
  -- –î–æ–±–∞–≤–ª—è–µ–º timestamp –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
  result := result || '_' || extract(epoch from now())::bigint::text;
  
  RETURN result;
END;
$$ LANGUAGE plpgsql;

-- 5. –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è QR —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏
CREATE OR REPLACE FUNCTION create_qr_token_for_application(application_id_input UUID)
RETURNS VARCHAR(255) AS $$
DECLARE
  new_token VARCHAR(255);
  token_exists BOOLEAN;
BEGIN
  -- –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
  LOOP
    new_token := generate_qr_token();
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
    SELECT EXISTS(SELECT 1 FROM applications WHERE qr_code_token = new_token) INTO token_exists;
    
    -- –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
    IF NOT token_exists THEN
      EXIT;
    END IF;
  END LOOP;
  
  -- –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
  UPDATE applications 
  SET 
    qr_code_token = new_token,
    qr_generated_at = NOW()
  WHERE id = application_id_input;
  
  RETURN new_token;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 6. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏ –ø–æ QR —Ç–æ–∫–µ–Ω—É
CREATE OR REPLACE FUNCTION get_application_by_qr_token(token_input VARCHAR(255))
RETURNS TABLE(
  id UUID,
  numbers INTEGER[],
  user_name TEXT,
  user_phone TEXT,
  cedula TEXT,
  payment_method TEXT,
  payment_proof_url TEXT,
  status TEXT,
  admin_notes TEXT,
  created_at TIMESTAMP WITH TIME ZONE,
  updated_at TIMESTAMP WITH TIME ZONE,
  qr_generated_at TIMESTAMP WITH TIME ZONE,
  draw_name TEXT,
  draw_status TEXT,
  is_winner BOOLEAN,
  winner_number INTEGER
) AS $$
BEGIN
  RETURN QUERY
  SELECT 
    a.id,
    a.numbers,
    a.user_name,
    a.user_phone,
    a.cedula,
    a.payment_method,
    a.payment_proof_url,
    a.status,
    a.admin_notes,
    a.created_at,
    a.updated_at,
    a.qr_generated_at,
    ld.draw_name,
    ld.status as draw_status,
    CASE 
      WHEN ld.winner_number = ANY(a.numbers) AND ld.status = 'finished' AND a.status = 'approved' 
      THEN true 
      ELSE false 
    END as is_winner,
    ld.winner_number
  FROM applications a
  LEFT JOIN lottery_draws ld ON ld.status IN ('active', 'finished')
  WHERE a.qr_code_token = token_input
  ORDER BY ld.created_at DESC
  LIMIT 1;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 7. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ QR –∫–æ–¥–∞
CREATE OR REPLACE FUNCTION log_qr_verification(
  application_id_input UUID,
  token_input VARCHAR(255),
  ip_input INET DEFAULT NULL,
  user_agent_input TEXT DEFAULT NULL
)
RETURNS UUID AS $$
DECLARE
  verification_id UUID;
BEGIN
  INSERT INTO qr_verifications (
    application_id,
    qr_token,
    verification_ip,
    user_agent
  ) VALUES (
    application_id_input,
    token_input,
    ip_input,
    user_agent_input
  ) RETURNING id INTO verification_id;
  
  RETURN verification_id;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 8. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Row Level Security –¥–ª—è –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
ALTER TABLE qr_verifications ENABLE ROW LEVEL SECURITY;

-- –ü–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è qr_verifications
CREATE POLICY "Anyone can create verification logs" ON qr_verifications
  FOR INSERT WITH CHECK (true);

CREATE POLICY "Only service role can read verification logs" ON qr_verifications
  FOR SELECT USING (auth.role() = 'service_role');

-- 9. –í–∫–ª—é—á–∞–µ–º —Ä–µ–∞–ª—Ç–∞–π–º –¥–ª—è –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
ALTER PUBLICATION supabase_realtime ADD TABLE qr_verifications;

-- 10. –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è QR —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏
CREATE OR REPLACE FUNCTION auto_create_qr_token()
RETURNS TRIGGER AS $$
BEGIN
  -- –°–æ–∑–¥–∞–µ–º QR —Ç–æ–∫–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫
  IF TG_OP = 'INSERT' THEN
    NEW.qr_code_token := generate_qr_token();
    NEW.qr_generated_at := NOW();
  END IF;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- –£–¥–∞–ª—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
DROP TRIGGER IF EXISTS trigger_auto_create_qr_token ON applications;
CREATE TRIGGER trigger_auto_create_qr_token
  BEFORE INSERT ON applications
  FOR EACH ROW
  EXECUTE FUNCTION auto_create_qr_token();

-- ================================
-- –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
-- ================================

/*
-- –°–æ–∑–¥–∞—Ç—å QR —Ç–æ–∫–µ–Ω –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞—è–≤–∫–∏:
SELECT create_qr_token_for_application('your-application-id-here');

-- –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –ø–æ QR —Ç–æ–∫–µ–Ω—É:
SELECT * FROM get_application_by_qr_token('your-qr-token-here');

-- –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É QR –∫–æ–¥–∞:
SELECT log_qr_verification(
  'application-id',
  'qr-token', 
  '192.168.1.1'::INET,
  'Mozilla/5.0...'
);
*/

-- –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
DO $$
BEGIN
  RAISE NOTICE '‚úÖ QR Code System Migration completed successfully!';
  RAISE NOTICE 'üì± Applications table extended with QR fields';
  RAISE NOTICE 'üîç QR verifications table created';
  RAISE NOTICE 'üîß Functions and triggers set up';
  RAISE NOTICE 'üõ°Ô∏è  Security policies configured';
END $$; 